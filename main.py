import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View
import os
from dotenv import load_dotenv
from collections import defaultdict
from datetime import datetime
import uuid
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json

load_dotenv()
TOKEN = os.getenv("TOKEN")

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
google_creds = json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó
treatment_sheet = client.open("Stock Treatment Log CRY").worksheet("treatment_list")
therapist_sheet = client.open("Stock Treatment Log CRY").worksheet("therapist_list")

TREATMENTS = treatment_sheet.col_values(1)[1:]
THERAPISTS = therapist_sheet.col_values(1)[1:]
BRANCHES = ["‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡πÅ‡∏û‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏°2"]

stock_data = defaultdict(lambda: defaultdict(int))
usage_log = []

ADMIN_CHANNEL_ID = 1394115416049061918
ADMIN_ONLY_CHANNEL_ID = 139411551234567890
TREATMENT_CHANNEL_ID = 1394115507883606026

@tree.command(name="stock_‡πÄ‡∏û‡∏¥‡πà‡∏°", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Admin)")
async def stock_add(interaction: discord.Interaction, ‡∏™‡∏≤‡∏Ç‡∏≤: str, treatment: str, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: int):
    if interaction.channel_id not in [ADMIN_CHANNEL_ID, ADMIN_ONLY_CHANNEL_ID]:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Stock Management", ephemeral=True)
        return
    stock_data[‡∏™‡∏≤‡∏Ç‡∏≤][treatment] += ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {treatment} {‡∏à‡∏≥‡∏ô‡∏ß‡∏ô} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {‡∏™‡∏≤‡∏Ç‡∏≤}")

@tree.command(name="stock_‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤")
async def stock_check(interaction: discord.Interaction, ‡∏™‡∏≤‡∏Ç‡∏≤: str):
    if interaction.channel_id != ADMIN_ONLY_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Stock Management", ephemeral=True)
        return
    msg = f"üì¶ ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {‡∏™‡∏≤‡∏Ç‡∏≤}:\n"
    for t in TREATMENTS:
        qty = stock_data[‡∏™‡∏≤‡∏Ç‡∏≤][t]
        msg += f"- {t}: {qty} ‡∏ä‡∏¥‡πâ‡∏ô\n"
    await interaction.response.send_message(msg)

from discord.ui import Select

class MultiTreatmentModal(Modal):
    treatments_autocomplete = [t.lower() for t in TREATMENTS]
    therapists_autocomplete = [t.lower() for t in THERAPISTS]
    def __init__(self):
        equipment_options = [
            discord.SelectOption(label="TRT-‡∏´‡∏°‡∏ß‡∏Å", description="‡∏´‡∏°‡∏ß‡∏Å"),
            discord.SelectOption(label="TRT-Milky ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î", description="‡∏°‡∏¥‡∏•‡∏Å‡∏µ‡πâ"),
            discord.SelectOption(label="TRT-‡∏¢‡∏≤‡∏ä‡∏≤", description="‡∏¢‡∏≤‡∏ä‡∏≤"),
            discord.SelectOption(label="TRT-‡∏Å‡∏Å‡∏ô", description="‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡πÉ‡∏ô"),
            discord.SelectOption(label="TRT-‡∏ä‡∏∏‡∏î‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î+‡∏ö‡∏≥‡∏£‡∏∏‡∏á", description="‡∏ä‡∏∏‡∏î‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"),
            discord.SelectOption(label="‡πÅ‡∏•‡πá‡∏õ‡∏¢‡∏≤‡∏ä‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å", description="‡πÅ‡∏•‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å")
        ]
        super().__init__(title="‡∏•‡∏á Treatment ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô")
        self.customer_input = TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", required=True)
        self.branch_input = TextInput(label="‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•‡∏£‡∏∞‡∏¢‡∏≠‡∏á)", required=True)
        self.add_item(self.customer_input)
        self.add_item(self.branch_input)
        self.equipment_select = Select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥", options=equipment_options, min_values=0, max_values=len(equipment_options))
        self.add_item(self.equipment_select)
        self.treatment_inputs = []
        self.therapist_inputs = []
        for i in range(5):
            treatment_input = TextInput(label=f"Treatment {i+1}", required=False, placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ Treatment ‡πÄ‡∏ä‡πà‡∏ô Qskin")
            therapist_input = TextInput(label=f"Therapist {i+1}", required=False, placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâSM")
            self.add_item(treatment_input)
            self.add_item(therapist_input)
            self.treatment_inputs.append(treatment_input)
            self.therapist_inputs.append(therapist_input)
    async def on_submit(self, interaction: discord.Interaction):
        error_messages = []
        usage_sheet = client.open("Stock Treatment Log CRY").worksheet("treatment_usage")
        today = datetime.now().isoformat()
        branch = self.branch_input.value.strip()
        customer = self.customer_input.value.strip()
        today_str = datetime.now().strftime("%Y-%m-%d")
        records = usage_sheet.get_all_values()
        existing_group_id = None
        for row in records[1:]:
            if row[1][:10] == today_str and row[5] == customer and row[2] == branch:
                existing_group_id = row[7]
                break
        group_id = existing_group_id if existing_group_id else str(uuid.uuid4())
        for treatment_input, therapist_input in zip(self.treatment_inputs, self.therapist_inputs):
            if treatment_input.value and therapist_input.value:
                if treatment_input.value.lower() not in self.treatments_autocomplete:
                    error_messages.append(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Treatment: {treatment_input.value}")
                    continue
                if therapist_input.value.lower() not in self.therapists_autocomplete:
                    error_messages.append(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Therapist: {therapist_input.value}")
                    continue
                usage_sheet.append_row([
                    str(uuid.uuid4()), today, branch, treatment_input.value, 1, customer, therapist_input.value, group_id, "pending"
                ])
        for equipment in self.equipment_select.values:
            usage_sheet.append_row([
                str(uuid.uuid4()), today, branch, equipment, 1, customer, "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", group_id, "pending"
            ])

        for treatment_input, therapist_input in zip(self.treatment_inputs, self.therapist_inputs):
            if treatment_input.value and therapist_input.value:
                if treatment_input.value.lower() not in self.treatments_autocomplete:
                    error_messages.append(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Treatment: {treatment_input.value}")
                    continue
                if therapist_input.value.lower() not in self.therapists_autocomplete:
                    error_messages.append(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Therapist: {therapist_input.value}")
                    continue
                usage_sheet.append_row([
                    str(uuid.uuid4()), today, branch, treatment_input.value, 1, customer, therapist_input.value, group_id, "pending"
                ])
                if therapist_input.value.lower() not in self.therapists_autocomplete:
                    error_messages.append(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Therapist: {therapist_input.value}")
                    continue
                usage_sheet.append_row([
                    str(uuid.uuid4()), today, branch, treatment_input.value, 1, customer, therapist_input.value, group_id, "pending"
                ])
        if error_messages:
            await interaction.response.send_message("\n".join(error_messages), ephemeral=True)

            return
        summary_msg = (
            f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Treatment ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n"
            f"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {customer}\n"
            f"‡∏™‡∏≤‡∏Ç‡∏≤: {branch}\n"
            f"Group UUID: {group_id}\n\n"
            f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á:\n"
            )
        for treatment_input, therapist_input in zip(self.treatment_inputs, self.therapist_inputs):
            if treatment_input.value and therapist_input.value:
                summary_msg += f"- {treatment_input.value} | {therapist_input.value}"
        channel = interaction.guild.get_channel(TREATMENT_CHANNEL_ID)
        await channel.send(summary_msg)
        await interaction.response.send_message("‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á Treatment Log ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@tree.command(name="stock_‡∏™‡πà‡∏á‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå", description="‡∏™‡πà‡∏á‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")
async def stock_cut_multi(interaction: discord.Interaction):
    if interaction.channel_id != TREATMENT_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Treatment Log", ephemeral=True)
        return
    await interaction.response.send_modal(MultiTreatmentModal())

@tree.command(name="‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", description="‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
async def stock_confirm_group(interaction: discord.Interaction, group_uuid: str):
    if interaction.channel_id != TREATMENT_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Treatment Log", ephemeral=True)
        return
    usage_sheet = client.open("Stock Treatment Log CRY").worksheet("treatment_usage")
    records = usage_sheet.get_all_values()
    updated = 0
    for i, row in enumerate(records):
        if row[7] == group_uuid and row[8] == "pending":
            usage_sheet.update_cell(i+1, 9, "completed")
            updated += 1
    if updated > 0:
        await interaction.response.send_message(f"‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° {group_uuid} ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {updated} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@tree.command(name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", description="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
async def treatment_report_today(interaction: discord.Interaction):
    if interaction.channel_id != ADMIN_ONLY_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Admin Only", ephemeral=True)
        return
    usage_sheet = client.open("Stock Treatment Log CRY").worksheet("treatment_usage")
    records = usage_sheet.get_all_values()
    today_date = datetime.now().date().isoformat()
    msg = "üìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    treatment_count = defaultdict(lambda: defaultdict(int))
    count = 0
    for row in records[1:]:
        if row[1][:10] == today_date:
            treatment_count[row[2]][row[3]] += 1
            treatment_count[row[3]] += 1
            msg += f"‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {row[5]}, Therapist: {row[6]}, Treatment: {row[3]}, ‡∏™‡∏≤‡∏Ç‡∏≤: {row[2]}"
            count += 1
    if count == 0:
        msg += "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    else:
        msg += "üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏° Treatment ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤"
        for branch, treatments in treatment_count.items():
            msg += f"üìç {branch}"
            for treatment, total in treatments.items():
                msg += f"- {treatment}: {total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"

            msg += f"- {treatment}: {total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
    await interaction.response.send_message(msg, ephemeral=True)

@tree.command(name="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏•‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", description="‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
async def treatment_summary_by_therapist(interaction: discord.Interaction):
    if interaction.channel_id != ADMIN_ONLY_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Admin Only", ephemeral=True)
        return
    usage_sheet = client.open("Stock Treatment Log CRY").worksheet("treatment_usage")
    records = usage_sheet.get_all_values()
    today_date = datetime.now().date().isoformat()
    summary = defaultdict(int)
    for row in records[1:]:
        if row[1][:10] == today_date and row[8] == "completed":
            summary[row[6]] += 1
    msg = "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"
    if summary:
        for therapist, total in summary.items():
            msg += f"- {therapist}: {total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
    else:
        msg += "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
    await interaction.response.send_message(msg, ephemeral=True)

@tree.command(name="stock_‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", description="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Treatment ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
@app_commands.describe(uuid_codes="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å UUID ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
async def stock_cancel(interaction: discord.Interaction, uuid_codes: str):
    ...

@stock_cancel.autocomplete("uuid_codes")
async def autocomplete_cancel_uuid(interaction: discord.Interaction, current: str):
    ...

    if interaction.channel_id != ADMIN_ONLY_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Admin Only", ephemeral=True)
        return
    usage_sheet = client.open("Stock Treatment Log CRY").worksheet("treatment_usage")
    records = usage_sheet.get_all_values()
    uuid_list = [u.split("|")[0].strip() for u in uuid_codes.split(",") if u.strip()]
    cancelled = 0
    for i, row in enumerate(records):
        if row[0] in uuid_list and row[8] == "pending":
            usage_sheet.update_cell(i + 1, 9, "cancelled")
            cancelled += 1
    if cancelled > 0:
        await interaction.response.send_message(f"‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {cancelled} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö UUID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ", ephemeral=True)

async def autocomplete_cancel_uuid(interaction: discord.Interaction, current: str):
    usage_sheet = client.open("Stock Treatment Log CRY").worksheet("treatment_usage")
    records = usage_sheet.get_all_values()
    today_date = datetime.now().date().isoformat()
    options = []
    for row in records[1:]:
        if row[1][:10] == today_date and row[8] == "pending" and current.lower() in row[0].lower():
            options.append(app_commands.Choice(name=f"{row[0]} | {row[5]}", value=f"{row[0]} | {row[5]}"))
        if len(options) >= 20:
            break
    return options

@bot.event
async def on_ready():
    await tree.sync()
    print(f"‚úÖ Bot {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

bot.run(TOKEN)
