import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button
import os
from dotenv import load_dotenv
from collections import defaultdict
from datetime import datetime
import uuid
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json

load_dotenv()
TOKEN = os.getenv("TOKEN")

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
google_creds = json.loads(os.getenv("GOOGLE_CREDENTIALS_JSON"))
creds = ServiceAccountCredentials.from_json_keyfile_dict(google_creds, scope)
client = gspread.authorize(creds)

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡∏µ‡∏ó
treatment_sheet = client.open("Stock Treatment Config").worksheet("treatment_list")
therapist_sheet = client.open("Stock Treatment Config").worksheet("therapist_list")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets
TREATMENTS = treatment_sheet.col_values(1)[1:]
THERAPISTS = therapist_sheet.col_values(1)[1:]

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≤‡∏Ç‡∏≤
BRANCHES = ["‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡πÅ‡∏û‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏°2"]

stock_data = defaultdict(lambda: defaultdict(int))
usage_log = []

# Channel ID ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
ADMIN_CHANNEL_ID = 1394115416049061918
TREATMENT_CHANNEL_ID = 1394115507883606026

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å
@tree.command(name="stock_‡πÄ‡∏û‡∏¥‡πà‡∏°", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Admin)")
async def stock_add(interaction: discord.Interaction, ‡∏™‡∏≤‡∏Ç‡∏≤: str, treatment: str, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: int):
    if interaction.channel_id != ADMIN_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Stock Management", ephemeral=True)
        return
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ", ephemeral=True)
        return
    stock_data[‡∏™‡∏≤‡∏Ç‡∏≤][treatment] += ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° {treatment} {‡∏à‡∏≥‡∏ô‡∏ß‡∏ô} ‡∏ä‡∏¥‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö {‡∏™‡∏≤‡∏Ç‡∏≤}")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
@tree.command(name="stock_‡∏ï‡∏±‡∏î", description="‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
async def stock_cut(interaction: discord.Interaction, ‡∏™‡∏≤‡∏Ç‡∏≤: str, treatment: str, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: int, ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: str, ‡πÄ‡∏ó‡∏£‡∏û‡∏¥‡∏à: str):
    if interaction.channel_id != TREATMENT_CHANNEL_ID:
        await interaction.response.send_message("‚ùå ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Treatment Log", ephemeral=True)
        return
    if treatment not in TREATMENTS:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠ Treatment ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
        return
    if ‡πÄ‡∏ó‡∏£‡∏û‡∏¥‡∏à not in THERAPISTS:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", ephemeral=True)
        return
    if stock_data[‡∏™‡∏≤‡∏Ç‡∏≤][treatment] < ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:
        await interaction.response.send_message("‚ùå ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠", ephemeral=True)
        return
    stock_data[‡∏™‡∏≤‡∏Ç‡∏≤][treatment] -= ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    log_entry = {
        "uuid": str(uuid.uuid4()),
        "date": datetime.now().isoformat(),
        "branch": ‡∏™‡∏≤‡∏Ç‡∏≤,
        "treatment": treatment,
        "amount": ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô,
        "customer": ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤,
        "therapist": ‡πÄ‡∏ó‡∏£‡∏û‡∏¥‡∏à,
        "status": "pending"
    }
    usage_log.append(log_entry)
    await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡∏î {treatment} {‡∏à‡∏≥‡∏ô‡∏ß‡∏ô} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏à‡∏≤‡∏Å {‡∏™‡∏≤‡∏Ç‡∏≤} ‡πÉ‡∏´‡πâ {‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤} ‡πÇ‡∏î‡∏¢ {‡πÄ‡∏ó‡∏£‡∏û‡∏¥‡∏à}")

# ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
@tree.command(name="stock_‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤")
async def stock_check(interaction: discord.Interaction, ‡∏™‡∏≤‡∏Ç‡∏≤: str):
    msg = f"üì¶ ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {‡∏™‡∏≤‡∏Ç‡∏≤}:\n"
    for t in TREATMENTS:
        qty = stock_data[‡∏™‡∏≤‡∏Ç‡∏≤][t]
        msg += f"- {t}: {qty} ‡∏ä‡∏¥‡πâ‡∏ô\n"
    await interaction.response.send_message(msg)

# ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
@bot.event
async def on_ready():
    await tree.sync()
    print(f"‚úÖ Bot {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

bot.run(TOKEN)
