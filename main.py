import discord
from discord.ext import commands
from discord import app_commands
from flask import Flask, request
from threading import Thread
import os
import json
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
CHANNEL_ID = 1394115507883606026
ADMIN_ONLY_CHANNEL_ID = 1394133334317203476
TREATMENT_CHANNEL_ID = 1394115507883606026

app = Flask(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def send_to_discord(data):
    channel = bot.get_channel(CHANNEL_ID)
    if not channel:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á Discord")
        return

    if "trt" in data:  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á TRT
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° TRT
        treatments = []
        for t in data["trt"]:
            if t["name"]:
                treatments.append(f"- {t['name']} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {t['amount']} ‡πÄ‡∏ó‡∏≠‡∏£‡∏≤‡∏õ‡∏¥‡∏™‡∏ï‡πå: {t['therapist']}")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        equipment_lines = []
        for eq in data.get("equipment", []):
            equipment_lines.append(f"- {eq['name']} ({eq['qty']})")

        msg = (
            f"üíÜ‚Äç‚ôÄÔ∏è **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ó‡∏£‡∏µ‡∏ï‡πÄ‡∏°‡∏ô‡∏ï‡πå (TRT)**\n"
            f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {data.get('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')}\n"
            f"üßæ M-JOB: {data.get('‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏öM')}\n"
            f"üë©‚Äçü¶∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {data.get('‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤')}\n"
            f"üìÑ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ TRT:\n" + "\n".join(treatments) + "\n"
            f"üîß ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:\n" + "\n".join(equipment_lines)
        )
        bot.loop.create_task(channel.send(msg))
    else:
        bot.loop.create_task(channel.send("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å webhook ‡πÑ‡∏î‡πâ"))

# Web server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook
app = Flask('')

@app.route('/')
def home():
    return "Bot is running"

@app.route('/webhook', methods=['POST'])
def webhook():
    data = request.get_json()
    print("üì• ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets:", data)
    if data:
        send_to_discord(data)
        return "‚úÖ Data received", 200
    return "‚ùå No data", 400

# Run Flask ‡πÉ‡∏ô Thread (‡πÉ‡∏´‡πâ Railway ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ bot ‡∏¢‡∏±‡∏á‡∏ï‡∏∑‡πà‡∏ô)
def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bot
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    try:
        synced = await tree.sync()
        print(f"üìù Synced {len(synced)} commands")
    except Exception as e:
        print("‚ùå Sync error:", e)

keep_alive()
bot.run(TOKEN)
